generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  is_active         Boolean @default(true)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  passwordHash  String
  image         String?
  is_active         Boolean @default(true)
  accounts      Account[]
  member        Member?
}


model Member{
  id          String @id @default(cuid())
  userId      String @unique
  name        String
  gender      String
  dateOfBirth DateTime
  created     DateTime @default(now())
  updated     DateTime @default(now())
  description String
  city        String
  country     String
  image       String?
  is_active   Boolean @default(true)
  user        User @relation(fields: [userId], references: [id],onDelete: Cascade)
  photos      Photo[]
  sourceLikes Like[] @relation("SourceMember")
  targetLikes Like[] @relation("TargetMember")
  senderMessages  Message[] @relation("sender")
  recipientMessages Message[] @relation("recipient")
}

model Photo{
  id          String @id @default(cuid())
  url         String
  publicId    String?
  is_active         Boolean @default(true)
  memberId    String
  member      Member @relation(fields: [memberId],references: [id],onDelete: Cascade)
}


model Like {
  sourceUserId String
  targetUserId String

  sourceMember Member @relation(name: "SourceMember", fields: [sourceUserId], references: [userId],onDelete: Cascade)
  targetMember Member @relation(name: "TargetMember", fields: [targetUserId], references: [userId],onDelete: Cascade)

  @@id([sourceUserId, targetUserId])

  created     DateTime @default(now())
  updated     DateTime @default(now())
}


model Message {
  id          String @id @default(cuid())
  text        String
  created     DateTime @default(now())
  senderId    String?
  recipientId String?
  sender      Member? @relation("sender",fields: [senderId],references: [userId],onDelete: SetNull)
  recipient   Member? @relation("recipient",fields: [recipientId],references: [userId],onDelete: SetNull)
  dateRead    DateTime?
  senderDeleted Boolean @default(false)
  recipientDeleted Boolean @default(false)
}